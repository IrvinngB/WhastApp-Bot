require('dotenv').config();

const { Client } = require('whatsapp-web.js');
const qrcode = require('qrcode');
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require('fs');
const path = require('path');
const moment = require('moment-timezone');
const StabilityManager = require('./stability');
const cron = require('node-cron');

// Manejo de memoria optimizado
let used = process.memoryUsage();
console.log('Uso de memoria inicial:', {
    rss: `${Math.round(used.rss / 1024 / 1024)}MB`,
    heapTotal: `${Math.round(used.heapTotal / 1024 / 1024)}MB`,
    heapUsed: `${Math.round(used.heapUsed / 1024 / 1024)}MB`
});

// Control de estado global y rate limiting
let isProcessingMessage = false;
let messageQueue = [];
const MAX_QUEUE_SIZE = 100;
const MESSAGE_TIMEOUT = 60000; // 60 segundos

// Sistema de rate limiting
const MESSAGE_RATE_LIMIT = {
    WINDOW_MS: 60000, // 1 minuto
    MAX_MESSAGES: 10  // m√°ximo 10 mensajes por minuto
};

const userMessageCounts = new Map();

// Constantes y configuraci√≥n
const MEDIA_TYPES = {
    IMAGE: 'image',
    VIDEO: 'video',
    AUDIO: 'audio',
    DOCUMENT: 'document',
    STICKER: 'sticker'
};

const SPAM_PATTERNS = [
    'spam',
    'publicidad',
    'promo',
    'gana dinero',
    'investment',
    'casino',
    'lottery',
    'premio',
    'ganaste',
    'bitcoin',
    'crypto',
    'prestamo',
    'loan',
    /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b/, // Email pattern
    /(?:https?:\/\/)?(?:[\w\-]+\.)+[a-zA-Z]{2,}(?:\/[^\s]*)?/, // URL pattern
];

const PANAMA_TIMEZONE = "America/Panama";
const PORT = process.env.PORT || 3000;
const PAUSE_DURATION = 60 * 60 * 1000;
const MAX_RETRIES = 3;

// Estado global con gesti√≥n de memoria mejorada
const pausedUsers = new Map();
const contextStore = new Map();
const userRequestsHuman = new Map();
const lastUserMessages = new Map(); // Para detectar mensajes repetidos
const spamCooldown = new Map(); // Para manejar el cooldown despu√©s de detectar spam

// Sistema de mensajes mejorado
const SYSTEM_MESSAGES = {
    WELCOME: `¬°Hola! üëã Soy Electra, el asistente virtual de ElectronicsJS. Estoy aqu√≠ para ayudarte con informaci√≥n sobre nuestros productos y servicios. 

Si en cualquier momento deseas hablar con un representante humano, puedes escribir "agente" o "hablar con persona real".

¬øEn qu√© puedo ayudarte hoy?`,
    
    HUMAN_REQUEST: `Entiendo que prefieres hablar con un representante humano. Voy a conectarte con uno de nuestros agentes.

‚è≥ Por favor, ten en cuenta que puede haber un tiempo de espera. Mientras tanto, ¬øhay algo espec√≠fico en lo que pueda ayudarte?

Para volver al asistente virtual en cualquier momento, escribe "volver al bot".`,
    
    STORE_CLOSED: `üïí Nuestra tienda est√° cerrada en este momento.

    Horario de atenci√≥n:
    - Lunes a Viernes: 6:00 AM - 10:00 PM
    - S√°bados y Domingos: 7:00 AM - 8:00 PM
    (Hora de Panam√°)

    Aunque la tienda est√° cerrada, puedo ayudarte con:
    - Informaci√≥n b√°sica sobre productos
    - Informaci√≥n sobre la empresa
    - Preguntas frecuentes

    Para consultas m√°s complejas, como hacer reclamos o realizar compras, te recomiendo visitar nuestra p√°gina web: https://irvin-benitez.software o contactarnos durante nuestro horario de atenci√≥n.

    ¬øEn qu√© puedo ayudarte?`,

    ERROR: `Lo siento, estamos experimentando dificultades t√©cnicas. Por favor, intenta nuevamente en unos momentos.

Si el problema persiste, puedes escribir "agente" para hablar con una persona real.`,

    TIMEOUT: `Lo siento, tu mensaje est√° tomando m√°s tiempo del esperado. Por favor, intenta nuevamente o escribe "agente" para hablar con una persona real.`,

    MEDIA_RECEIVED: `¬°Gracias por compartir este contenido! üìÅ

Para brindarte una mejor atenci√≥n, te conectar√© con uno de nuestros representantes que podr√° revisar tu archivo y ayudarte personalmente.

‚è≥ Un agente se pondr√° en contacto contigo pronto. Mientras tanto, ¬øhay algo espec√≠fico que quieras mencionar sobre el archivo compartido?`,

    SPAM_WARNING: `‚ö†Ô∏è Has enviado demasiados mensajes repetidos. Por favor, espera 2 minutos antes de enviar m√°s mensajes.`,

    RATE_LIMIT: `‚ö†Ô∏è Has enviado demasiados mensajes en poco tiempo. 

Por favor, espera un momento antes de enviar m√°s mensajes. Esto nos ayuda a mantener una conversaci√≥n m√°s efectiva. 

Si tienes una urgencia, escribe "agente" para hablar con una persona real.`,

    REPEATED_MESSAGE: `Parece que est√°s enviando el mismo mensaje repetidamente. 

¬øHay algo espec√≠fico en lo que pueda ayudarte? Si necesitas hablar con un agente humano, solo escribe "agente".`,

HORARIO: `Horario de atenci√≥n:
    - Lunes a Viernes: 6:00 AM - 10:00 PM
    - S√°bados y Domingos: 7:00 AM - 8:00 PM
    (Hora de Panam√°)`,
    WEB_PAGE: `Para m√°s informaci√≥n, visita nuestra p√°gina web: https://irvin-benitez.software. Estamos aqu√≠ para ayudarte con cualquier consulta que tengas sobre nuestros productos y servicios. ¬°Gracias por elegir ElectronicsJS!`
};

// Verificaci√≥n de variables de entorno
if (!process.env.GEMINI_API_KEY) {
    throw new Error('La variable de entorno GEMINI_API_KEY no est√° configurada.');
}

// Inicializar Google Generative AI con manejo de errores
let genAI;
try {
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
} catch (error) {
    console.error('Error inicializando Google Generative AI:', error);
    process.exit(1);
}

// Funci√≥n mejorada para cargar archivos con cach√©
const fileCache = new Map();
function loadFile(filePath, defaultValue = '') {
    try {
        if (fileCache.has(filePath)) {
            return fileCache.get(filePath);
        }
        
        const content = fs.readFileSync(path.join(__dirname, filePath), 'utf-8');
        fileCache.set(filePath, content);
        return content;
    } catch (error) {
        console.error(`Error al cargar el archivo ${filePath}:`, error);
        return defaultValue;
    }
}

// Cargar informaci√≥n desde archivos con manejo de errores
let laptops, companyInfo, promptInstructions;
try {
    laptops = loadFile('Laptops1.txt');
    companyInfo = loadFile('info_empresa.txt');
    promptInstructions = loadFile('promt.txt');
} catch (error) {
    console.error('Error cargando archivos de configuraci√≥n:', error);
    process.exit(1);
}

// NUEVA FUNCI√ìN: Extraer informaci√≥n relevante de un texto seg√∫n la consulta del usuario
async function extractRelevantInfo(fullText, userQuery, maxLength = 500) {
    try {
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        
        const prompt = `
        Basado en la siguiente consulta del usuario: "${userQuery}"
        
        Extrae SOLO la informaci√≥n m√°s relevante del siguiente texto. 
        La respuesta debe ser concisa (m√°ximo ${maxLength} caracteres) y directamente relacionada con la consulta.
        Si no hay informaci√≥n relevante, proporciona un breve resumen general.
        
        TEXTO:
        ${fullText.substring(0, 10000)} // Limitamos el tama√±o para no sobrecargar la API
        `;
        
        const result = await model.generateContent(prompt);
        const response = result.response.text();
        
        // Si la respuesta es demasiado larga, cortarla
        return response.length > maxLength ? response.substring(0, maxLength) + "..." : response;
    } catch (error) {
        console.error("Error al extraer informaci√≥n relevante:", error);
        // En caso de error, devolver un fragmento del texto original
        return fullText.length > maxLength ? 
            fullText.substring(0, maxLength) + "..." : 
            fullText;
    }
}

// Sistema de rate limiting mejorado
function checkRateLimit(userId) {
    const now = Date.now();
    const userCount = userMessageCounts.get(userId) || { count: 0, timestamp: now };

    // Limpiar contadores antiguos
    if (now - userCount.timestamp > MESSAGE_RATE_LIMIT.WINDOW_MS) {
        userCount.count = 1;
        userCount.timestamp = now;
    } else {
        userCount.count += 1;
    }

    userMessageCounts.set(userId, userCount);
    return userCount.count > MESSAGE_RATE_LIMIT.MAX_MESSAGES;
}

// Funci√≥n para detectar mensajes repetidos
function isRepeatedMessage(userId, message) {
    const lastMessage = lastUserMessages.get(userId);
    const currentMessage = message.toLowerCase().trim();
    
    if (lastMessage && lastMessage.text === currentMessage) {
        lastMessage.count += 1;
        lastMessage.lastSeen = Date.now();
        lastUserMessages.set(userId, lastMessage);
        return lastMessage.count >= 3;
    } else {
        lastUserMessages.set(userId, {
            text: currentMessage,
            count: 1,
            lastSeen: Date.now()
        });
    }
    
    return false;
}

// Funci√≥n para detectar spam
function isSpamMessage(message) {
    const messageText = message.body.toLowerCase();
    
    // Verificar patrones de spam
    const containsSpamPattern = SPAM_PATTERNS.some(pattern => {
        if (pattern instanceof RegExp) {
            return pattern.test(messageText);
        }
        return messageText.includes(pattern);
    });

    // Verificar caracter√≠sticas sospechosas
    const hasMultipleUrls = (messageText.match(/https?:\/\//g) || []).length > 1;
    const hasMultiplePhoneNumbers = (messageText.match(/\b\d{8,}\b/g) || []).length > 1;
    const hasExcessivePunctuation = (messageText.match(/[!?]/g) || []).length > 5;
    
    return containsSpamPattern || hasMultipleUrls || hasMultiplePhoneNumbers || hasExcessivePunctuation;
}

// Funci√≥n mejorada para generar respuestas
async function generateResponse(userMessage, contactId, retryCount = 0) {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    try {
        // Recuperar o inicializar el contexto del usuario
        let userContext = contextStore.get(contactId) || [];
        
        // Limitar el tama√±o del contexto para no sobrecargar la memoria
        if (userContext.length > 10) {
            userContext = userContext.slice(-10);
        }
        
        // Preparar el prompt con instrucciones mejoradas
        const prompt = `${promptInstructions}

Informaci√≥n sobre nuestra empresa:
${companyInfo.substring(0, 500)}...

Informaci√≥n sobre nuestras laptops:
${laptops.substring(0, 500)}...

Usa estos datos solo si son relevantes para la consulta del usuario. No menciones que tienes esta informaci√≥n a menos que sea necesario.

Contexto de la conversaci√≥n:
${userContext.map(msg => `${msg.role === 'user' ? 'Cliente' : 'Bot'}: ${msg.parts}`).join('\n')}

Consulta del cliente: ${userMessage}

Responde de manera concisa, profesional y amigable. No inventes informaci√≥n que no tengas.`;

        const result = await model.generateContent(prompt);
        const response = result.response.text();
        
        // Actualizar el contexto con la nueva interacci√≥n
        userContext.push({ role: 'user', parts: userMessage });
        userContext.push({ role: 'model', parts: response });
        contextStore.set(contactId, userContext);
        
        return response;
    } catch (error) {
        console.error('Error generando respuesta:', error);
        
        // Implementar reintentos con l√≠mite
        if (retryCount < MAX_RETRIES) {
            console.log(`Reintentando generaci√≥n de respuesta (${retryCount + 1}/${MAX_RETRIES})...`);
            return generateResponse(userMessage, contactId, retryCount + 1);
        }
        
        return SYSTEM_MESSAGES.ERROR;
    }
}

// === NUEVO: Decisi√≥n de acci√≥n por IA ===
async function decideAction(userMessage, contactId) {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-8b" });
    
    try {
        const prompt = `Analiza el siguiente mensaje de un usuario y decide qu√© acci√≥n tomar:

Mensaje del usuario: "${userMessage}"

Clasifica este mensaje en UNA SOLA de las siguientes categor√≠as y devuelve √öNICAMENTE el formato JSON indicado:

1. Si solicita informaci√≥n espec√≠fica sobre laptops: {"action": "info_laptops", "relevant_query": "la consulta espec√≠fica sobre laptops"}
2. Si solicita informaci√≥n general sobre la empresa: {"action": "info_empresa", "relevant_query": "la consulta espec√≠fica sobre la empresa"}
3. Si es una pregunta o consulta general: {"action": "general_query"}
4. Si solicita hablar con un agente humano: {"action": "human_agent"}
5. Si es un saludo o mensaje inicial: {"action": "greeting"}
6. Si es un agradecimiento o despedida: {"action": "farewell"}

IMPORTANTE: Para las categor√≠as 1 y 2, a√±ade "relevant_query" con los t√©rminos espec√≠ficos de b√∫squeda del usuario.
NO A√ëADAS EXPLICACIONES. Devuelve √öNICAMENTE el objeto JSON.`;

        const result = await model.generateContent(prompt);
        const response = result.response.text();
        
        try {
            // Intentar parsear la respuesta como JSON
            return JSON.parse(response.trim());
        } catch (jsonError) {
            console.error('Error parseando respuesta de clasificaci√≥n:', jsonError);
            // Si falla, asumir consulta general
            return { action: "general_query" };
        }
    } catch (error) {
        console.error('Error en la clasificaci√≥n del mensaje:', error);
        return { action: "general_query" };
    }
}

// Funci√≥n para manejar mensajes con medios
async function handleMediaMessage(message) {
    try {
        // Implementaci√≥n del manejo de medios
        // ...
    } catch (error) {
        console.error('Error manejando mensaje con medios:', error);
        return SYSTEM_MESSAGES.ERROR;
    }
}

// Funci√≥n mejorada para verificar horario
function getStoreStatus() {
    // Implementaci√≥n de la verificaci√≥n de horario
    // ...
}

// Funciones para verificar mensajes
function isRequestingHuman(message) {
    const text = message.body.toLowerCase();
    return text.includes('agente') || 
           text.includes('humano') || 
           text.includes('persona') || 
           text.includes('representante') ||
           text.includes('hablar con alguien');
}

function isReturningToBot(message) {
    const text = message.body.toLowerCase();
    return text.includes('volver al bot') || 
           text.includes('hablar con bot') || 
           text.includes('asistente virtual');
}

// MODIFICADO: Manejador de mensajes principal mejorado
async function handleMessage(message) {
    try {
        const contactId = message.from;
        const userMessage = message.body;
        
        // Verificaciones previas
        if (isRepeatedMessage(contactId, userMessage)) {
            return SYSTEM_MESSAGES.REPEATED_MESSAGE;
        }
        
        if (checkRateLimit(contactId)) {
            return SYSTEM_MESSAGES.RATE_LIMIT;
        }
        
        if (isSpamMessage(message)) {
            // Manejar spam
            spamCooldown.set(contactId, Date.now() + 120000); // 2 minutos de cooldown
            return SYSTEM_MESSAGES.SPAM_WARNING;
        }
        
        // Manejo de solicitud de agente humano
        if (isRequestingHuman(message)) {
            userRequestsHuman.set(contactId, true);
            return SYSTEM_MESSAGES.HUMAN_REQUEST;
        }
        
        // Manejo de retorno al bot
        if (isReturningToBot(message) && userRequestsHuman.get(contactId)) {
            userRequestsHuman.delete(contactId);
            return SYSTEM_MESSAGES.WELCOME;
        }
        
        // Si el usuario est√° hablando con un humano, no procesar con el bot
        if (userRequestsHuman.get(contactId)) {
            // Simplemente registrar el mensaje para el agente humano
            console.log(`Mensaje para agente humano de ${contactId}: ${userMessage}`);
            return null; // No responder autom√°ticamente
        }
        
        // Verificar si la tienda est√° cerrada
        const storeStatus = getStoreStatus();
        if (!storeStatus.isOpen) {
            // Durante horario cerrado, limitar funcionalidad
            return SYSTEM_MESSAGES.STORE_CLOSED;
        }
        
        // Determinar acci√≥n basada en an√°lisis de IA
        const decision = await decideAction(userMessage, contactId);
        
        if (decision.action === "greeting") {
            return SYSTEM_MESSAGES.WELCOME;
        } else if (decision.action === "farewell") {
            return "¬°Gracias por contactarnos! Si necesitas algo m√°s, estamos aqu√≠ para ayudarte. ¬°Que tengas un excelente d√≠a!";
        } else if (decision.action === "human_agent") {
            userRequestsHuman.set(contactId, true);
            return SYSTEM_MESSAGES.HUMAN_REQUEST;
        } 
        // MODIFICADO: Manejo mejorado de informaci√≥n de empresa y laptops
        else if (decision.action === "info_empresa") {
            const relevantInfo = await extractRelevantInfo(
                companyInfo, 
                decision.relevant_query || "informaci√≥n general", 
                800
            );
            return `${relevantInfo}\n\nSi necesitas m√°s informaci√≥n espec√≠fica, no dudes en preguntar.`;
        } else if (decision.action === "info_laptops") {
            const relevantInfo = await extractRelevantInfo(
                laptops, 
                decision.relevant_query || "laptops disponibles", 
                800
            );
            return `${relevantInfo}\n\nSi deseas conocer m√°s detalles o tienes alguna otra pregunta, estoy aqu√≠ para ayudarte.`;
        } else {
            // Consulta general - usar Gemini para responder
            return await generateResponse(userMessage, contactId);
        }
    } catch (error) {
        console.error('Error manejando mensaje:', error);
        return SYSTEM_MESSAGES.ERROR;
    }
}

// Sistema de cola de mensajes mejorado
async function processMessageQueue() {
    if (isProcessingMessage || messageQueue.length === 0) return;
    
    isProcessingMessage = true;
    
    try {
        const { message, resolveCallback, timeoutId } = messageQueue.shift();
        
        // Cancelar el timeout ya que vamos a procesar el mensaje
        if (timeoutId) clearTimeout(timeoutId);
        
        console.log(`Procesando mensaje de ${message.from}: ${message.body.substring(0, 50)}${message.body.length > 50 ? '...' : ''}`);
        
        const response = await handleMessage(message);
        
        // Si hay una respuesta, enviarla
        if (response) {
            await message.reply(response);
        }
        
        resolveCallback(response);
    } catch (error) {
        console.error('Error procesando cola de mensajes:', error);
    } finally {
        isProcessingMessage = false;
        
        // Procesar el siguiente mensaje despu√©s de una peque√±a pausa
        setTimeout(processMessageQueue, 500);
    }
}

// Funci√≥n para agregar mensaje a la cola
function queueMessage(message) {
    return new Promise((resolve) => {
        // Verificar si la cola est√° llena
        if (messageQueue.length >= MAX_QUEUE_SIZE) {
            message.reply(SYSTEM_MESSAGES.RATE_LIMIT).catch(console.error);
            resolve(SYSTEM_MESSAGES.RATE_LIMIT);
            return;
        }
        
        // Configurar timeout para evitar esperas prolongadas
        const timeoutId = setTimeout(() => {
            message.reply(SYSTEM_MESSAGES.TIMEOUT).catch(console.error);
            resolve(SYSTEM_MESSAGES.TIMEOUT);
            
            // Eliminar este mensaje de la cola
            const index = messageQueue.findIndex(item => item.message.id === message.id);
            if (index !== -1) {
                messageQueue.splice(index, 1);
            }
        }, MESSAGE_TIMEOUT);
        
        // Agregar a la cola
        messageQueue.push({
            message,
            resolveCallback: resolve,
            timeoutId,
            timestamp: Date.now()
        });
        
        // Intentar procesar la cola
        processMessageQueue();
    });
}

// Configurar el cliente de WhatsApp con opciones optimizadas
const whatsappClient = new Client({
    puppeteer: {
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--single-process',
            '--disable-gpu',
            '--disable-extensions',
            '--disable-software-rasterizer',
            '--disable-features=site-per-process',
            '--js-flags="--max-old-space-size=512"'
        ],
        headless: "new",
        timeout: 0
    },
    clientId: 'electronics-js-bot',
    restartOnAuthFail: true
});

// Inicializar el StabilityManager
const stabilityManager = new StabilityManager(whatsappClient);

// Manejadores de eventos de WhatsApp mejorados
whatsappClient.on('qr', (qr) => {
    // Manejo del c√≥digo QR
});

whatsappClient.on('ready', () => {
    console.log('Cliente WhatsApp listo y conectado');
});

whatsappClient.on('loading_screen', (percent, message) => {
    console.log(`Cargando: ${percent}% - ${message}`);
});

// Evento de mensaje mejorado con cola
whatsappClient.on('message', async (message) => {
    // Manejar mensaje recibido
});

// Limpieza peri√≥dica de datos
setInterval(() => {
    // Limpieza de datos
}, MESSAGE_RATE_LIMIT.WINDOW_MS);

// Configurar Express y Socket.IO
const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    pingTimeout: 60000,
    pingInterval: 25000
});

// Configuraci√≥n de rutas Express
app.use(express.static(path.join(__dirname, 'web')));
app.use(express.json());

app.get('/', (req, res) => {
    // Manejar ruta principal
});

// Iniciar el sistema de estabilidad
stabilityManager.startStabilitySystem(app);

// Iniciar servidor con manejo de errores
server.listen(PORT, () => {
    console.log(`Servidor escuchando en el puerto ${PORT}`);
});

// Manejo de errores no capturados
process.on('unhandledRejection', (error) => {
    console.error('Error no manejado (Promise):', error);
});

process.on('uncaughtException', (error) => {
    console.error('Excepci√≥n no capturada:', error);
});

// Limpieza al cerrar
process.on('SIGINT', async () => {
    // Limpieza de recursos
});